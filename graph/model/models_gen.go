// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AddCellphoneMutation struct {
	Name     string       `json:"name"`
	Brand    *string      `json:"brand,omitempty"`
	Color    *string      `json:"color,omitempty"`
	Category CategoryType `json:"category"`
}

type AddRefrigeratorMutation struct {
	Name     string       `json:"name"`
	Brand    *string      `json:"brand,omitempty"`
	Color    *string      `json:"color,omitempty"`
	Category CategoryType `json:"category"`
}

type AddTVMutation struct {
	Name     string       `json:"name"`
	Brand    *string      `json:"brand,omitempty"`
	Color    *string      `json:"color,omitempty"`
	Category CategoryType `json:"category"`
}

type Cellphone struct {
	ID       string       `json:"id"`
	Name     string       `json:"name"`
	Brand    *string      `json:"brand,omitempty"`
	Color    *string      `json:"color,omitempty"`
	Category CategoryType `json:"category"`
}

type EditCellphoneMutation struct {
	ID       string        `json:"id"`
	Name     *string       `json:"name,omitempty"`
	Brand    *string       `json:"brand,omitempty"`
	Color    *string       `json:"color,omitempty"`
	Category *CategoryType `json:"category,omitempty"`
}

type EditRefrigeratorMutation struct {
	ID       string        `json:"id"`
	Name     *string       `json:"name,omitempty"`
	Brand    *string       `json:"brand,omitempty"`
	Color    *string       `json:"color,omitempty"`
	Category *CategoryType `json:"category,omitempty"`
}

type EditTVMutation struct {
	ID       string        `json:"id"`
	Name     *string       `json:"name,omitempty"`
	Brand    *string       `json:"brand,omitempty"`
	Color    *string       `json:"color,omitempty"`
	Category *CategoryType `json:"category,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type Refrigerator struct {
	ID       string       `json:"id"`
	Name     string       `json:"name"`
	Brand    *string      `json:"brand,omitempty"`
	Color    *string      `json:"color,omitempty"`
	Category CategoryType `json:"category"`
}

type Tv struct {
	ID       string       `json:"id"`
	Name     string       `json:"name"`
	Brand    *string      `json:"brand,omitempty"`
	Color    *string      `json:"color,omitempty"`
	Category CategoryType `json:"category"`
}

type CategoryType string

const (
	CategoryTypeRefrigerator CategoryType = "REFRIGERATOR"
	CategoryTypeTv           CategoryType = "TV"
	CategoryTypeCellphone    CategoryType = "CELLPHONE"
)

var AllCategoryType = []CategoryType{
	CategoryTypeRefrigerator,
	CategoryTypeTv,
	CategoryTypeCellphone,
}

func (e CategoryType) IsValid() bool {
	switch e {
	case CategoryTypeRefrigerator, CategoryTypeTv, CategoryTypeCellphone:
		return true
	}
	return false
}

func (e CategoryType) String() string {
	return string(e)
}

func (e *CategoryType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CategoryType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CategoryType", str)
	}
	return nil
}

func (e CategoryType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
