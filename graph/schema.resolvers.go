package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"graphql-inventario/config"
	"graphql-inventario/graph/model"

	"github.com/google/uuid"
)

// AddRefrigerator is the resolver for the addRefrigerator field.
func (r *mutationResolver) AddRefrigerator(ctx context.Context, input model.AddRefrigeratorMutation) (*model.Refrigerator, error) {
	// Create a new refrigerator
	refrigerator := &model.Refrigerator{
		ID:       uuid.New().String(),
		Name:     input.Name,
		Brand:    input.Brand,
		Color:    input.Color,
		Category: input.Category,
	}

	// Save the refrigerator in the database
	_, err := config.DB.Exec("INSERT INTO refrigerators (id, name, brand, color, category) VALUES (?, ?, ?, ?, ?)",
		refrigerator.ID, refrigerator.Name, refrigerator.Brand, refrigerator.Color, refrigerator.Category)
	if err != nil {
		return nil, err
	}

	return refrigerator, nil
}

// EditRefrigerator is the resolver for the editRefrigerator field.
func (r *mutationResolver) EditRefrigerator(ctx context.Context, input model.EditRefrigeratorMutation) (*model.Refrigerator, error) {
	if input.ID == "" {
		return nil, fmt.Errorf("ID field is required")
	}

	// Obtain the database refrigerator
	refrigerator := &model.Refrigerator{}
	err := config.DB.QueryRow("SELECT * FROM refrigerators WHERE id = ?", input.ID).
		Scan(&refrigerator.ID, &refrigerator.Name, &refrigerator.Brand, &refrigerator.Color, &refrigerator.Category)
	if err != nil {
		return nil, err
	}

	// Update fields if new values were provided
	if input.Name != nil && *input.Name != "" {
		refrigerator.Name = *input.Name
	}
	if input.Brand != nil && *input.Brand != "" {
		refrigerator.Brand = input.Brand
	}
	if input.Color != nil && *input.Color != "" {
		refrigerator.Color = input.Color
	}

	// Updating the refrigerator in the database
	_, err = config.DB.Exec("UPDATE refrigerators SET name = ?, brand = ?, color = ? WHERE id = ?",
		refrigerator.Name, refrigerator.Brand, refrigerator.Color, refrigerator.ID)
	if err != nil {
		return nil, err
	}

	return refrigerator, nil
}

// RemoveRefrigerator is the resolver for the removeRefrigerator field.
func (r *mutationResolver) RemoveRefrigerator(ctx context.Context, id string) (string, error) {
	// Remove the refrigerator from the database
	_, err := config.DB.Exec("DELETE FROM refrigerators WHERE id = ?", id)
	if err != nil {
		return "", err
	}

	return "It was successfully eliminated. ID = " + id, nil
}

// AddTv is the resolver for the addTV field.
func (r *mutationResolver) AddTv(ctx context.Context, input model.AddTVMutation) (*model.Tv, error) {
	// Create a new tv
	tv := &model.Tv{
		ID:       uuid.New().String(),
		Name:     input.Name,
		Brand:    input.Brand,
		Color:    input.Color,
		Category: input.Category,
	}

	// Save the tv in the database
	_, err := config.DB.Exec("INSERT INTO televisions (id, name, brand, color, category) VALUES (?, ?, ?, ?, ?)",
		tv.ID, tv.Name, tv.Brand, tv.Color, tv.Category)
	if err != nil {
		return nil, err
	}

	return tv, nil
}

// EditTv is the resolver for the editTV field.
func (r *mutationResolver) EditTv(ctx context.Context, input model.EditTVMutation) (*model.Tv, error) {
	if input.ID == "" {
		return nil, fmt.Errorf("To edit a tv you need to use an ID")
	}

	// Get the tv from the database
	tv := &model.Tv{}
	err := config.DB.QueryRow("SELECT * FROM televisions WHERE id = ?", input.ID).
		Scan(&tv.ID, &tv.Name, &tv.Brand, &tv.Color, &tv.Category)
	if err != nil {
		return nil, err
	}

	// Update fields if new values were provided
	if input.Name != nil && *input.Name != "" {
		tv.Name = *input.Name
	}
	if input.Brand != nil && *input.Brand != "" {
		tv.Brand = input.Brand
	}
	if input.Color != nil && *input.Color != "" {
		tv.Color = input.Color
	}

	// Update the tv in the database
	_, err = config.DB.Exec("UPDATE televisions SET name = ?, brand = ?, color = ? WHERE id = ?",
		tv.Name, tv.Brand, tv.Color, tv.ID)
	if err != nil {
		return nil, err
	}

	return tv, nil
}

// RemoveTv is the resolver for the removeTV field.
func (r *mutationResolver) RemoveTv(ctx context.Context, id string) (string, error) {
	// Delete the TV set from the database
	_, err := config.DB.Exec("DELETE FROM televisions WHERE id = ?", id)
	if err != nil {
		return "", err
	}

	return "It was successfully eliminated. ID = " + id, nil
}

// AddCellphone is the resolver for the addCellphone field.
func (r *mutationResolver) AddCellphone(ctx context.Context, input model.AddCellphoneMutation) (*model.Cellphone, error) {
	// Create a new cellphone
	cellphone := &model.Cellphone{
		ID:       uuid.New().String(),
		Name:     input.Name,
		Brand:    input.Brand,
		Color:    input.Color,
		Category: input.Category,
	}

	// Save the cellphone in the database
	_, err := config.DB.Exec("INSERT INTO cellphones (id, name, brand, color, category) VALUES (?, ?, ?, ?, ?)",
		cellphone.ID, cellphone.Name, cellphone.Brand, cellphone.Color, cellphone.Category)
	if err != nil {
		return nil, err
	}

	return cellphone, nil
}

// EditCellphone is the resolver for the editCellphone field.
func (r *mutationResolver) EditCellphone(ctx context.Context, input model.EditCellphoneMutation) (*model.Cellphone, error) {
	if input.ID == "" {
		return nil, fmt.Errorf("To edit a cellphone you need to use an ID")
	}

	// Get the cellphone from the database
	cellphone := &model.Cellphone{}
	err := config.DB.QueryRow("SELECT * FROM cellphones WHERE id = ?", input.ID).
		Scan(&cellphone.ID, &cellphone.Name, &cellphone.Brand, &cellphone.Color, &cellphone.Category)
	if err != nil {
		return nil, err
	}

	// Update fields if new values were provided
	if input.Name != nil && *input.Name != "" {
		cellphone.Name = *input.Name
	}
	if input.Brand != nil && *input.Brand != "" {
		cellphone.Brand = input.Brand
	}
	if input.Color != nil && *input.Color != "" {
		cellphone.Color = input.Color
	}

	// Update the cellphone in the database
	_, err = config.DB.Exec("UPDATE cellphones SET name = ?, brand = ?, color = ? WHERE id = ?",
		cellphone.Name, cellphone.Brand, cellphone.Color, cellphone.ID)
	if err != nil {
		return nil, err
	}

	return cellphone, nil
}

// RemoveCellphone is the resolver for the removeCellphone field.
func (r *mutationResolver) RemoveCellphone(ctx context.Context, id string) (string, error) {
	// Delete the cellphone from the database
	_, err := config.DB.Exec("DELETE FROM cellphones WHERE id = ?", id)
	if err != nil {
		return "", err
	}

	return "It was successfully eliminated. ID = " + id, nil
}

// Refrigerators is the resolver for the refrigerators field.
func (r *queryResolver) Refrigerators(ctx context.Context) ([]*model.Refrigerator, error) {
	// Query all refrigerators in the database
	rows, err := config.DB.Query("SELECT * FROM refrigerators")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// Iterate on the results and create a list of refrigerators
	refrigerators := []*model.Refrigerator{}
	for rows.Next() {
		refrigerator := &model.Refrigerator{}
		err := rows.Scan(&refrigerator.ID, &refrigerator.Name, &refrigerator.Brand, &refrigerator.Color, &refrigerator.Category)
		if err != nil {
			return nil, err
		}
		refrigerators = append(refrigerators, refrigerator)
	}

	return refrigerators, nil
}

// Televisions is the resolver for the televisions field.
func (r *queryResolver) Televisions(ctx context.Context) ([]*model.Tv, error) {
	// Query all TVs in the database
	rows, err := config.DB.Query("SELECT * FROM televisions")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// Iterate on the results and create a list of televisions
	televisions := []*model.Tv{}
	for rows.Next() {
		tv := &model.Tv{}
		err := rows.Scan(&tv.ID, &tv.Name, &tv.Brand, &tv.Color, &tv.Category)
		if err != nil {
			return nil, err
		}
		televisions = append(televisions, tv)
	}

	return televisions, nil
}

// Cellphones is the resolver for the cellphones field.
func (r *queryResolver) Cellphones(ctx context.Context) ([]*model.Cellphone, error) {
	// Query all cellphones in the database
	rows, err := config.DB.Query("SELECT * FROM cellphones")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// Iterate on the results and create a list of cell phones
	cellphones := []*model.Cellphone{}
	for rows.Next() {
		cellphone := &model.Cellphone{}
		err := rows.Scan(&cellphone.ID, &cellphone.Name, &cellphone.Brand, &cellphone.Color, &cellphone.Category)
		if err != nil {
			return nil, err
		}
		cellphones = append(cellphones, cellphone)
	}

	return cellphones, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
